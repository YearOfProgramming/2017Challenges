class Node:
    def __init__(self, id, left=None, right=None):
        self.id = id
        self.left = left
        self.right = right

    def invert(self):
    #invert node and all subnodes
        temp = self.left
        self.left = self.right
        self.right = temp
        if self.left is not None:
            self.left.reverse()
        if self.right is not None:
            self.right.reverse()

def print_tree(root):
    i = 0
    levels = {i: [root]}
    while not all(node is None for node in levels[i]):
        levels[i + 1] = []
        for node in levels[i]:
            if node is not None:
                levels[i+1].extend([node.left, node.right])
                print(node.id, end="")
            else:
                print("/", end="")
        print()
        i += 1

BTree = Node(4, Node(2, Node(1), Node(3)), Node(7, Node(6), Node(9)))
print_tree(BTree)
BTree.invert()
print_tree(BTree)
